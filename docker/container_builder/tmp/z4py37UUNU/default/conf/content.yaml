# Prototypes
c_v:
  type: choice
  widget: choice_v

c_h:
  type: choice
  widget: choice_h

mc_v:
  type: multichoice
  widget: choice_v

mc_h:
  type: multichoice
  widget: choice_h

# db_upload - upload slot that stores data in our database
db_upload:
  type: upload
  store_class: 'SD::Slot::Upload::Store::Database'

# datepicker - date slot with jQuery datepicker
datepicker:
  type: date
  widget: datepicker
  class: datepicker

#
# Often used
#

# yes_no - choice with yes or no
yes_no:
  type: choice
  widget: choice_v
  options:
    - Yes
    - No

#
# Stubs for larger widgets
#

# tree - org_tree_expand select type with sane check and options subs
tree:
  type: choice
  widget: org_tree_expand
  check: |
    sub {
       my ($self, $item) = @_;
       unless($item =~ /^\d+$/ && $item >= 1 && $item <= scalar @{ $self->options } ){
           die E->new("Not one of allowed responses");
       }
       return 1;
    }
  options: |
    sub {
      my $self = shift;
      use Data::Rmap qw/:all/;
      return [ rmap_to {
        return cut( $_->{text} ) if (ref $_ eq 'HASH');
        return $_ unless ref $_;
        return shift->recurse;
      } HASH|ARRAY|VALUE, @{$self->tree} ];
    }


# ranking - a record slot that handles 'rank the following' type questions
ranking:
  type: record
  mandatory: |
    sub {
      my $self = shift;
      return 1 unless defined $_[0];
      return ! $self->normalize(@_);
    }
  # XXX: normalize is depreciated, but.. currently there is no simple
  # way to override the check sub to run code after the subslot validation
  normalize: |
    sub {
      my( $self, $val ) = @_;
      my %val_counts;
      for my $slt ( @{ $self->columns } ) {
        next if ! exists $val->{ $slt->name }; # Should this be var_name
        my $v = $val->{ $slt->name };
        next if (! defined $v || $v =~ /^\s*$/);
        if ( $val_counts{$v}++ ) {
          die E->new("More than one criterion has the same ranking ($v)");
        }
      }
      unless ( scalar keys %val_counts == $self->columns->[0]->max_val ) {
        die E::Skip->new("You must rank the criterion from ".
          $self->columns->[0]->min_val." to ".$self->columns->[0]->max_val );
      }
      return 1;
    }

# You can add more here
---
start:
  nav_actions:
    create_survey: 1
    show: 1
  create_survey: |
    sub {
        my ($page, $session) = @_;

        my $config = SD::Config->load;

        my $new_session = $config->{create_component_session}->('survey');
        my $next_id     = $session->get('next_patient_id');
        my $patient_id  = $session->get('patient_id_prefix') . "-$next_id";

        $new_session->set(patient_id     => $patient_id);
        $new_session->set(created        => time());
        $new_session->set(parent_session => $session->get('session_key'));
        $new_session->set(phn            => $session->get('phn'));
        $new_session->set(practice       => $session->get('practice'));
        $new_session->set(location       => $session->get('location'));

        ## So we can redirect directly to the session after this.
        $session->set(last_created_session_key => $new_session->get('session_key'));
        $session->set(next_patient_id => $next_id + 1);

        return 'redirect_to_survey';
    }
  qns:
    - text: "[% PROCESS 'survey-index' %]"
      tt2: 1
---
redirect_to_survey:
  template: redirect_to_survey

---
last:
  nav:
    - first: Start
    - prev: Prev
    - next: Submit
  next: sub { $_[1]->set(completed=>time()); 'completed' }
  percent: 99
  qns:
    - text: "[% PROCESS last %]"
      tt2: 1
